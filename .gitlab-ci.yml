stages:
  - dependabot-gomod
  - backend-build
  - backend-deploy
  - frontend-build
  - frontend-deploy

variables:
  DEPENDABOT_GITLAB_IMAGE: docker.io/andrcuns/dependabot-gitlab
  DEPENDABOT_GITLAB_VERSION: 3.38.0-alpha.1
  BINARY_NAME: "projecta-web"
  REMOTE_BIN_DIR: "~/bin"

.dependabot-gitlab:
  image:
    name: ${DEPENDABOT_GITLAB_IMAGE}-${CI_JOB_NAME}:${DEPENDABOT_GITLAB_VERSION}
    entrypoint: [""]
  variables:
    GIT_STRATEGY: none
    RAILS_ENV: production
    SECRET_KEY_BASE: key
    PACKAGE_MANAGER: $CI_JOB_NAME
    SETTINGS__GITLAB_URL: $CI_SERVER_URL
    SETTINGS__STANDALONE: "true"
    SETTINGS__LOG_COLOR: "true"
  script:
    - cd /home/dependabot/app
    - bundle exec rake "dependabot:update[${PROJECT_PATH:-$CI_PROJECT_PATH},${PACKAGE_MANAGER?},${DIRECTORY?}]"

gomod:
  stage: dependabot-gomod
  extends: .dependabot-gitlab
  rules:
    - if: $DEPENDENCY_UPDATES_DISABLED
      when: never
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $PACKAGE_MANAGER_SET =~ /\bgomod\b/'

# Used for CI/CD component release and test
#
include:
  - local: .gitlab/ci/*.gitlab-ci.yml
    rules:
      - if: $CI_PROJECT_PATH == 'dependabot-gitlab/dependabot-standalone'

backend-build:
  image: golang:1.24
  stage: backend-build
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
  script:
    - cd cmd/web
    - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags="-w -s -X main.Version=${CI_COMMIT_SHA}" -o ../../builds/${BINARY_NAME}-${CI_COMMIT_SHA} .
  artifacts:
    paths:
      - builds/${BINARY_NAME}-${CI_COMMIT_SHA}

backend-deploy:
  stage: backend-deploy
  needs: [backend-build]
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
  script:
    # Install SSH client
    - apt-get update && apt-get install -y openssh-client
    
    # Set up SSH
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | base64 -d | tr -d '\r' | ssh-add -
    - echo "$SSH_PUBLIC_KEY" | base64 -d > ~/.ssh/id_rsa.pub
    - chmod 600 ~/.ssh/id_rsa.pub
    
    # Add server to known hosts
    - ssh-keyscan -H ${HOSTING_SERVER} >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    
    # Upload binary and update symlink
    - scp builds/${BINARY_NAME}-${CI_COMMIT_SHA} ${HOSTING_USER}@${HOSTING_SERVER}:${REMOTE_BIN_DIR}/
    - |
      ssh ${HOSTING_USER}@${HOSTING_SERVER} "cd ${REMOTE_BIN_DIR} && \
      ln -sf ${BINARY_NAME}-${CI_COMMIT_SHA} ${BINARY_NAME} && \
      ls -t ${BINARY_NAME}-* | tail -n +3 | xargs -r rm"

frontend-build:
  image: node:22.12.0
  stage: frontend-build
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
  script:
    - cd web-ui
    - npm install
    - npm run build
  artifacts:
    paths:
      - web-ui/dist/
    expire_in: 1 hour

frontend-deploy:
  image: debian:bookworm
  stage: frontend-deploy
  needs: [frontend-build]
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
  script:
    - apt-get update && apt-get install -y openssh-client
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | base64 -d | tr -d '\r' | ssh-add -
    - ssh-keyscan -H ${HOSTING_SERVER} >> ~/.ssh/known_hosts
    # Deploy frontend files
    - scp -r web-ui/dist/* ${HOSTING_USER}@${HOSTING_SERVER}:/var/www/html/projecta/
